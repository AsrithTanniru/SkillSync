// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  location            String?
  timezone            String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  onboardingCompleted Boolean   @default(false)

  // Skills they can teach
  teachingSkills      Skill[]      @relation("TeachingSkills")
  // Skills they want to learn
  learningSkills      Skill[]      @relation("LearningSkills")
  // Events they've created
  events              Event[]
  // Connections they've initiated
  sentConnections     Connection[] @relation("SentConnections")
  // Connections they've received
  receivedConnections Connection[] @relation("ReceivedConnections")

  accounts Account[]
  sessions Session[]
  Message  Message[]
}

model Skill {
  id            String   @id @default(cuid())
  name          String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  averageRating Float?   @default(0)
  ratingCount   Int      @default(0)

  // Users who can teach this skill
  teachers User[] @relation("TeachingSkills")
  // Users who want to learn this skill
  learners User[] @relation("LearningSkills")

  // Events related to this skill
  events      Event[]
  // Skill evaluations
  evaluations SkillEvaluation[]
}

model Event {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  title       String?
  description String?
  type        String // "learn" or "teach"
  level       String // "beginner", "intermediate", "advanced"
  date        DateTime
  time        String? // Time of the event (e.g., "14:00")
  duration    String? // Duration of the event (e.g., "1 hour")
  location    String?
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  skill       Skill        @relation(fields: [skillId], references: [id])
  skillId     String
  connections Connection[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Connection {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String   @default("pending") // pending, accepted, rejected
  message   String?

  fromUser   User      @relation("SentConnections", fields: [fromUserId], references: [id])
  fromUserId String
  toUser     User      @relation("ReceivedConnections", fields: [toUserId], references: [id])
  toUserId   String
  event      Event?    @relation(fields: [eventId], references: [id])
  eventId    String?
  chatRoom   ChatRoom?

  @@unique([fromUserId, toUserId])
}

model ChatRoom {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  connection    Connection @relation(fields: [connectionId], references: [id])
  connectionId  String     @unique
  lastMessageAt DateTime   @default(now())
  messages      Message[]
}

model Message {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation(fields: [senderId], references: [id])
  senderId   String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId String
}

model Review {
  id               String            @id @default(cuid())
  sessionId        String
  userId           String
  rating           Int
  feedback         String
  timestamp        DateTime          @default(now())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  skillEvaluations SkillEvaluation[]
}

model SkillEvaluation {
  id        String   @id @default(cuid())
  reviewId  String
  review    Review   @relation(fields: [reviewId], references: [id])
  skillId   String
  skill     Skill    @relation(fields: [skillId], references: [id])
  rating    Int // 1-5 rating for specific skill
  feedback  String? // Optional specific feedback for the skill
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([reviewId, skillId])
}

model TokenReward {
  id             String   @id @default(cuid())
  sessionId      String
  teacherAddress String
  amount         Int
  timestamp      DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
